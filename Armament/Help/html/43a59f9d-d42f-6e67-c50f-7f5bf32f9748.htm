<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>LoadBalancingPeer Properties</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="LoadBalancingPeer class, properties" /><meta name="Microsoft.Help.Id" content="Properties.T:Photon.Realtime.LoadBalancingPeer" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Photon.Realtime" /><meta name="file" content="43a59f9d-d42f-6e67-c50f-7f5bf32f9748" /><meta name="guid" content="43a59f9d-d42f-6e67-c50f-7f5bf32f9748" /><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">A Sandcastle Documented Class Library<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html\634149f3-64dc-afe7-9c8d-6b9afbfc61b4.htm" title="A Sandcastle Documented Class Library" tocid="roottoc">A Sandcastle Documented Class Library</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/918d8ccf-2c70-e2e7-f9df-4c9bfca19792.htm" title="Photon.Realtime" tocid="918d8ccf-2c70-e2e7-f9df-4c9bfca19792">Photon.Realtime</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/608c73f9-a91b-3dcc-6daa-7b55a7f3bba1.htm" title="LoadBalancingPeer Class" tocid="608c73f9-a91b-3dcc-6daa-7b55a7f3bba1">LoadBalancingPeer Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/75246a90-2c46-bd21-ac60-7d5b5175b99f.htm" title="LoadBalancingPeer Constructor " tocid="75246a90-2c46-bd21-ac60-7d5b5175b99f">LoadBalancingPeer Constructor </a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/43a59f9d-d42f-6e67-c50f-7f5bf32f9748.htm" title="LoadBalancingPeer Properties" tocid="43a59f9d-d42f-6e67-c50f-7f5bf32f9748">LoadBalancingPeer Properties</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/d006abe3-a4b0-5537-3597-91fc379a6163.htm" title="LoadBalancingPeer Methods" tocid="d006abe3-a4b0-5537-3597-91fc379a6163">LoadBalancingPeer Methods</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/2a6c6f0b-153f-7b62-8f27-69e8a1048b5b.htm" title="LoadBalancingPeer Fields" tocid="2a6c6f0b-153f-7b62-8f27-69e8a1048b5b">LoadBalancingPeer Fields</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>LoadBalancingPeer Properties</h1></td></tr></table><span class="introStyle"></span> <p>The <a href="608c73f9-a91b-3dcc-6daa-7b55a7f3bba1.htm">LoadBalancingPeer</a> type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Properties</span></div><div id="ID0RBSection" class="collapsibleSection"><table class="members" id="propertyList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><span class="nolink">ByteCountCurrentDispatch</span></td><td><div class="summary">
             Gets the size of the dispatched event or operation-result in bytes.
             This value is set before OnEvent() or OnOperationResponse() is called (within DispatchIncomingCommands()).
             </div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><span class="nolink">ByteCountLastOperation</span></td><td><div class="summary">
             Gets the size of the last serialized operation call in bytes.
             The value includes all headers for this single operation but excludes those of UDP, Enet Package Headers and TCP.
             </div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><span class="nolink">BytesIn</span></td><td><div class="summary">
            Gets count of all bytes coming in (including headers, excluding UDP/TCP overhead)
            </div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><span class="nolink">BytesOut</span></td><td><div class="summary">
            Gets count of all bytes going out (including headers, excluding UDP/TCP overhead)
            </div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr><tr data="protected;inherited;notNetfw;"><td><img src="../icons/protproperty.gif" alt="Protected property" title="Protected property" /></td><td><span class="nolink">ClientSdkIdShifted</span></td><td><div class="summary">For the Init-request, we shift the ClientId by one and the last bit signals a "debug" (0) or "release" build (1).</div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><span class="nolink">ClientVersion</span></td><td><div class="summary">Version of this library as string.</div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><span class="nolink">CommandBufferSize</span></td><td> <strong>Obsolete. </strong><div class="summary">
            No effect anymore. Removed without replacement.
            </div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><span class="nolink">CommandInfoCurrentDispatch</span></td><td><div class="summary">Returns the debug string of the event or operation-response currently being dispatched or string. Empty if none.</div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><span class="nolink">CommandLogSize</span></td><td><div class="summary">Size of CommandLog. Default is 0, no logging.</div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><span class="nolink">ConnectionTime</span></td><td><div class="summary">The internally used "per connection" time value, which is updated infrequently, when the library executes some connectio-related tasks.</div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><span class="nolink">CrcEnabled</span></td><td><div class="summary">
             While not connected, this controls if the next connection(s) should use a per-package CRC checksum.
             </div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><span class="nolink">EnableServerTracing</span></td><td><div class="summary">
            Debugging option to tell the Photon Server to log all datagrams.
            </div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><span class="nolink">IsEncryptionAvailable</span></td><td><div class="summary">
            This property is set internally, when OpExchangeKeysForEncryption successfully finished.
            While it's true, encryption can be used for operations.
            </div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><span class="nolink">IsSendingOnlyAcks</span></td><td><div class="summary">
            While true, the peer will not send any other commands except ACKs (used in UDP connections).
            </div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><span class="nolink">IsSimulationEnabled</span></td><td><div class="summary">
            Gets or sets the network simulation "enabled" setting.
            Changing this value also locks this peer's sending and when setting false,
            the internally used queues are executed (so setting to false can take some cycles).
            </div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><span class="nolink">LastSendAckTime</span></td><td><div class="summary">The last ConnectionTime value, when some ACKs were sent out by this client.</div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><span class="nolink">LastSendOutgoingTime</span></td><td><div class="summary">The last ConnectionTime value, when SendOutgoingCommands actually checked outgoing queues to send them. Must be connected.</div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><span class="nolink">LimitOfUnreliableCommands</span></td><td> <strong>Obsolete. </strong><div class="summary">
            No effect anymore. Removed without replacement.
            </div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><span class="nolink">Listener</span></td><td><div class="summary">
            Gets the IPhotonPeerListener of this instance (set in constructor).
            Can be used in derived classes for Listener.DebugReturn().
            </div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><span class="nolink">LocalMsTimestampDelegate</span></td><td><div class="summary">
            This setter for the (local-) timestamp delegate replaces the default Environment.TickCount with any equal function.
            </div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><span class="nolink">LocalTimeInMilliSeconds</span></td><td> <strong>Obsolete. </strong><div class="summary">
            Gets a local timestamp in milliseconds by calling SupportClass.GetTickCount().
            See LocalMsTimestampDelegate.
            </div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><span class="nolink">MaximumTransferUnit</span></td><td><div class="summary">
            The Maximum Trasfer Unit (MTU) defines the (network-level) packet-content size that is
            guaranteed to arrive at the server in one piece. The Photon Protocol uses this
            size to split larger data into packets and for receive-buffers of packets.
            </div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><span class="nolink">NetworkSimulationSettings</span></td><td><div class="summary">
            Gets the settings for built-in Network Simulation for this peer instance
            while IsSimulationEnabled will enable or disable them.
            Once obtained, the settings can be modified by changing the properties.
            </div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><span class="nolink">PacketLossByChallenge</span></td><td><div class="summary">
            Count of packages dropped due to wrong challenge for this connection.
            </div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><span class="nolink">PacketLossByCrc</span></td><td><div class="summary">
            Count of packages dropped due to failed CRC checks for this connection.
            </div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><span class="nolink">PeerID</span></td><td><div class="summary">
            This peer's ID as assigned by the server or 0 if not using UDP. Will be 0xFFFF before the client connects.
            </div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><span class="nolink">PeerState</span></td><td><div class="summary">
            This is the (low level) state of the connection to the server of a PhotonPeer. Managed internally and read-only.
            </div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><span class="nolink">QueuedIncomingCommands</span></td><td><div class="summary">
            Count of all currently received but not-yet-Dispatched reliable commands
            (events and operation results) from all channels.
            </div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><span class="nolink">QueuedOutgoingCommands</span></td><td><div class="summary">
            Count of all commands currently queued as outgoing, including all channels and reliable, unreliable.
            </div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><span class="nolink">QuickResendAttempts</span></td><td><div class="summary">
            Up to 4 resend attempts for a reliable command can be done in quick succession (after RTT+4*Variance).
            </div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><span class="nolink">ResentReliableCommands</span></td><td><div class="summary">
            Count of commands that got repeated (due to local repeat-timing before an ACK was received).
            </div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><span class="nolink">RoundTripTime</span></td><td><div class="summary">
             Time until a reliable command is acknowledged by the server.
            
             The value measures network latency and for UDP it includes the server's ACK-delay (setting in config).
             In TCP, there is no ACK-delay, so the value is slightly lower (if you use default settings for Photon).
            
             RoundTripTime is updated constantly. Every reliable command will contribute a fraction to this value.
            
             This is also the approximate time until a raised event reaches another client or until an operation
             result is available.
             </div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><span class="nolink">RoundTripTimeVariance</span></td><td><div class="summary">
            Changes of the roundtriptime as variance value. Gives a hint about how much the time is changing.
            </div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><span class="nolink">SentReliableCommandsCount</span></td><td><div class="summary">
            Gets the count of sent but not yet acknowledged commands (for UDP connections).
            </div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><span class="nolink">SerializationProtocolType</span></td><td><div class="summary">Enables selection of a (Photon-)serialization protocol. Used in Connect methods.</div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><span class="nolink">ServerAddress</span></td><td><div class="summary">
            The server address which was used in PhotonPeer.Connect() or null (before Connect() was called).
            </div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><span class="nolink">ServerIpAddress</span></td><td><div class="summary">Contains the IP address of the previously resolved ServerAddress (or empty, if address wasn't resolved with the internal methods).</div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><span class="nolink">ServerTimeInMilliSeconds</span></td><td><div class="summary">
             Approximated Environment.TickCount value of server (while connected).
             </div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><span class="nolink">SocketImplementation</span></td><td><div class="summary">
            Can be used to read the IPhotonSocket implementation at runtime (before connecting).
            </div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><span class="nolink">TimestampOfLastSocketReceive</span></td><td><div class="summary">
            Timestamp of the last time anything (!) was received from the server (including low level Ping, ACKs, events and operation-returns).
            </div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><span class="nolink">TrafficStatsElapsedMs</span></td><td><div class="summary">
            Returns the count of milliseconds the stats are enabled for tracking.
            </div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><span class="nolink">TrafficStatsEnabled</span></td><td><div class="summary">
            Enables or disables collection of statistics in TrafficStatsIncoming, TrafficStatsOutgoing and TrafficstatsGameLevel.
            </div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><span class="nolink">TrafficStatsGameLevel</span></td><td><div class="summary">
            Gets a statistic of incoming and outgoing traffic, split by operation, operation-result and event.
            </div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><span class="nolink">TrafficStatsIncoming</span></td><td><div class="summary">
            Gets the byte-count of incoming "low level" messages, which are either Enet Commands or Tcp Messages.
            These include all headers, except those of the underlying internet protocol Udp or Tcp.
            </div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><span class="nolink">TrafficStatsOutgoing</span></td><td><div class="summary">
            Gets the byte-count of outgoing "low level" messages, which are either Enet Commands or Tcp Messages.
            These include all headers, except those of the underlying internet protocol Udp or Tcp.
            </div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><span class="nolink">TransportProtocol</span></td><td><div class="summary">This is the transport protocol to be used for next connect (see remarks).</div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><span class="nolink">UsedProtocol</span></td><td><div class="summary">The protocol this peer is currently connected/connecting with (or 0).</div> (Inherited from <span class="nolink">PhotonPeer</span>.)</td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID1RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="608c73f9-a91b-3dcc-6daa-7b55a7f3bba1.htm">LoadBalancingPeer Class</a></div><div class="seeAlsoStyle"><a href="918d8ccf-2c70-e2e7-f9df-4c9bfca19792.htm">Photon.Realtime Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter"> </div></body></html>